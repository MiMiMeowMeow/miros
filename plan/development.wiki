*Feature Guide*

= Observe =
  
  *What defines Success?*
    The instrumentation on the pi will not detect transitions from windows bot

  *What is the problem?*
    The windows bots can see each other and the pi, but the pi cannot see the
    windows bots

  *Evidence that contradicts Assumptions:*
  
= Orient =
  *Symptoms of current issue:*
  * windows bots can see each other
  * pi can see 'other' messages on the first network
  * pi can not see instrumentation coming from windows

  *Questions regarding current issue:*
    Can a pi bot see other pi bots
    What changed recently, what caused this bug?
    Can a windows bot see multiple pi bots?
    
  *Assumptions:*

= Decide =
  *Problem*
   * [ ] Fix the multichart pend pattern
  
  *Idea/Hypothesizes/Plan(>=5):*
    * [ ] Find a way to view the orthogonal trace/spy while broadcasting
    * [ ] Turn on, then turn off a trace/spy dump of a single empathy chart
    * [ ] Identify issues in the orthogonal empathy chart
    * [ ] Use the broadcast spy to find how it is breaking
    * [ ] If you find a cool way to do this add it to the recipes
  
  *Chosen Idea/Hypothesis*
    * [ ] Turn on, then turn off a trace/spy dump of a single empathy chart

  *Plan to Expand-on-Idea/Disprove-Hypothesis*
  Write down name ideas

= Act =

= Up Coming =

  *Backlog*
    * [ ] Move all examples into the examples directory
    * [ ] Fix and verify all examples
    * [ ] Multi-Chart Race pattern
    * [ ] Multi-Chart Pend pattern
    * [ ] diagram semantics writing
    * [ ] Spec to diagram writing
    * [ ] Add factory examples to the state recipes
  *Someday Maybe*
    * [ ] Add statistics
    * [ ] Add Markov Chains
    * [ ] Create a sampler
    * [ ] Self organizing criticality
    * [ ] The devil's staircase
    * [ ] Find a simple way of linking IP addresses to URLs for next to nothing

  *Project Workflows:*
  
    *Setting up a python project is needlessly complicated, but here are the steps*:
    * [ ] Update the state documentation... Simplify it!
    * [ ] Move your production files into a subdirectory, named after your project
          (miros)
    * [ ] Add a setup.py file at the same level as this directory
    * [ ] Install virtualenv
    * [ ] > virtualenv <whatever> # in this case: > virtualenv prot
    * [ ] In bash > source ./prot/Scripts/activate
    * [ ] In the named subdirectory, (miros), add a file called __init__.py, this
          turns it into a package.  Your test code will be able to import files
          into themselves like:  from miros.events import <Class>
    * [ ] Add a test directory
    * [ ] Name your tests as <whatever>_test.py
    * [ ] In the test files your imports should work
    * [ ] Install your local package > pip install --editable .
    * [ ] Write a super simple test that just fails with tries to import something
          from your package.  Test it with > pytest, confirm failure from assert
          not an import error.
    * [ ] Wrestle with it until it works.

    *Getting your examples folder to work*:
    
    * [ ] Navigate to the root directory of your project
    * [ ] > pip3 install -e . --user
  
    *Getting your autotester working:*
    
      > pip3 install pytest-watch --user
      > ptw
    
    *Automation of documentation:*
    
      > cd doc
      > python3 automake.py &

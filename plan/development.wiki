*Feature Guide*

= Observe =
  
  *What defines Success?*
    The instrumentation on the pi will not detect transitions from the windows bot
    The WLS would actually work within TMUX. (arp would work in WLS)

  *What is the problem?*
    The Windows bots can see each other and the pi, but the pi cannot see the
    windows bots.  This is because the windows bot does not send its instrumentation
    to the bots.  The call to 'cmd.exe /C arp.exe -a' is just hanging (where the
    window bot can find the pi IP address).
    
    The WLS does not support the arp command.  The Windows WSL program manager
    (Rich Turner - bitcrazed) decided that they would not support a lot of basic
    networking tools.  To access the windows version of these tools, you can
    call the windows command line:
    
    > cmd.exe /C <windows command here>
    
    Unfortunately, this sometimes locks up in TMUX.  I need to run the command within
    TMUX because I need to access multiple shells to test the mesh network.
    
    So now to test my software I have to deal with some sort of WSL/Linux/Tmux
    interoperability bug.
    
    So Windows still doesn't really have Linux support yet.  The frustration
    with this OS continues. (so many wasted hours fighting windows/posix
    interoperability).

  *Evidence that contradicts Assumptions:*
    Sometimes the system works.
  
= Orient =
  *Symptoms of current issue:*
  * windows bots can see each other
  * pi can see 'other' messages on the first network
  * pi can not see instrumentation coming from windows
  * running TMUX then cmd.exe /C <command> hangs forever

  *Questions regarding current issue:*
    How did you get the system to ever work?
    Is there another way to get local IP addresses without calling the arp
    command?
    
  *Assumptions:*
    Upon system reset, it will work.  Once you quit out of the WLS or the ubuntu
    app, TMUX will never work properly again.

= Decide =
  *Problem*
   * [ ] Fix the instrumentation network issue (WSL work around)
  
  *Idea/Hypothesizes/Plan(>=5):*
    * [ ] Find way to reproduce the issue
    * [ ] Find way to solve the issue with a procedural work around
  
  *Chosen Idea/Hypothesis*
    * [ ] Turn on, then turn off a trace/spy dump of a single empathy chart

  *Plan to Expand-on-Idea/Disprove-Hypothesis*
  Write down name ideas

= Act =

= Up Coming =

  *Backlog*
    * [ ] Move all examples into the examples directory
    * [ ] Fix and verify all examples
    * [ ] Multi-Chart Race pattern
    * [ ] Multi-Chart Pend pattern
    * [ ] diagram semantics writing
    * [ ] Spec to diagram writing
    * [ ] Add factory examples to the state recipes
  
  *Someday Maybe*
    * [ ] Add statistics
    * [ ] Add Markov Chains
    * [ ] Create a sampler
    * [ ] Self organizing criticality
    * [ ] The devil's staircase
    * [ ] Find a simple way of linking IP addresses to URLs for next to nothing

  *Project Workflows:*
  
    *Recovering from the TMUX/WSL/cmd.exe bug*
      * [ ] open another shell <windows>ubunut
      * [ ] > ps -al | grep tmux
      * [ ] > sudo kill -9 <tmux pid>
      * [ ] restart WLS
  
    *Setting up a python project is needlessly complicated, but here are the steps*:
    * [ ] Update the state documentation... Simplify it!
    * [ ] Move your production files into a subdirectory, named after your project
          (miros)
    * [ ] Add a setup.py file at the same level as this directory
    * [ ] Install virtualenv
    * [ ] > virtualenv <whatever> # in this case: > virtualenv prot
    * [ ] In bash > source ./prot/Scripts/activate
    * [ ] In the named subdirectory, (miros), add a file called __init__.py, this
          turns it into a package.  Your test code will be able to import files
          into themselves like:  from miros.events import <Class>
    * [ ] Add a test directory
    * [ ] Name your tests as <whatever>_test.py
    * [ ] In the test files your imports should work
    * [ ] Install your local package > pip install --editable .
    * [ ] Write a super simple test that just fails with tries to import something
          from your package.  Test it with > pytest, confirm failure from assert
          not an import error.
    * [ ] Wrestle with it until it works.

    *Getting your examples folder to work*:
    
    * [ ] Navigate to the root directory of your project
    * [ ] > pip3 install -e . --user
  
    *Getting your autotester working:*
    
      > pip3 install pytest-watch --user
      > ptw
    
    *Automation of documentation:*
    
      > cd doc
      > python3 automake.py &

*Feature Guide*
= Observe =
  *What defines Success?*
  Remove the irritating newline from the live trace

  *What is the problem?*
  The new lines are creating noise in the output... 

  *Evidence that contradicts Assumptions:*

= Orient =
  *Symptoms of current issue:*

  *Questions regarding current issue:*
  Why was this done?

  *Assumptions:*

= Decide =
  *Idea/Hypothesises: >=5*
  * [ ] reproduce the issue
  * [ ] run the test in autotest mode
  * [ ] identify the location of the problem in the code
  * [ ] adjust it and iterate until all tests pass

  *Chosen Idea/Hypothesis*

  *Plan to Expand-on-Idea/Disprove-Hypothesis*

= Act =

= Up Coming =

  *Backlog*
    * [ ] Remove irritating newline in live trace
    * [ ] Add factory examples to the state recipes
    * [ ] Remove options 2 and 3 from the state recipes
    * [ ] Move all examples into the examples directory
    * [ ] Fix and verify all examples
    * [ ] Add botnet example
    * [ ] Multi-Chart Race pattern
    * [ ] Multi-Chart Pend pattern
    * [ ] diagram sematics writing
    * [ ] Spec to diagram writing
    * [ ] Read messaging patterns link off of RabbitMq

  *Weird and Fun Ideas*
    * [ ] Add statistics
    * [ ] Add Markov Chains
    * [ ] Create a sampler
    * [ ] Add rule 33 and some other Wolfram goodies
    * [ ] Self organizing criticality
    * [ ] The devil's staircase
    * [ ] Turn on/off spy within a subset of the chart [recipe]

  *Someday Maybe*
    * [ ] Link IP addresses to URL's (on the cheap)

  *Project Workflows:*
  
    *Setting up a python project is needlessly complicated, but here are the steps*:
    * [ ] Update the state documentation... Simplify it!
    * [ ] Move your production files into a subdirectory, named after your project
          (miros)
    * [ ] Add a setup.py file at the same level as this directory
    * [ ] Install virtualenv
    * [ ] > virtualenv <whatever> # in this case: > virtualenv prot
    * [ ] In bash > source ./prot/Scripts/activate
    * [ ] In the named subdirectory, (miros), add a file called __init__.py, this
          turns it into a package.  Your test code will be able to import files
          into themselves like:  from miros.events import <Class>
    * [ ] Add a test directory
    * [ ] Name your tests as <whatever>_test.py
    * [ ] In the test files your imports should work
    * [ ] Install your local package > pip install --editable .
    * [ ] Write a super simple test that just fails with tries to import something
          from your package.  Test it with > pytest, confirm failure from assert
          not an import error.
    * [ ] Wrestle with it until it works.

    *Getting your examples folder to work*:
    
    * [ ] Navigate to the root directory of your project
    * [ ] > pip3 install -e . --user
  
    *Getting your autotester working:*
    
      > pip3 install pytest-watch --user
      > ptw
    
    *Automation of documentation:*

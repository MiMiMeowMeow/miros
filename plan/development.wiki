*Feature Guide*

= Observe =
  *What defines Success?*
    * Write up the RabbitFactory in archer example
    * Draw new UML diagrams for the horse archer
    * Fix bad writing in the Mesh Network section
    * Lock down the new horse archer design into it's own example file
    * Talk about how to ensure an orthogonal component pattern is working in a
      multiunit design.
    * Create a diff; then place this into the example with explanations

  *What is the problem?*
    Need a path

  *Evidence that contradicts Assumptions:*
  
= Orient =
  *Symptoms of current issue:*
  * 

  *Questions regarding current issue:*
    What has recently changed?
    Can you baseline?
    
  *Assumptions:*

= Decide =
  *Problem*
   * [ ] 
  
  *Idea/Hypothesizes/Plan(>=5):*
    * [ ] 
  
  *Chosen Idea/Hypothesis*
    * [ ] 

  *Plan to Expand-on-Idea/Disprove-Hypothesis*
  Write down name ideas

= Act =

= Up Coming =

  *Backlog*
    * [ ] Move all examples into the examples directory
    * [ ] Fix and verify all examples
    * [ ] Multi-Chart Race pattern
    * [ ] Multi-Chart Pend pattern
    * [ ] diagram semantics writing
    * [ ] Spec to diagram writing
    * [ ] Add factory examples to the state recipes
  
  *Someday Maybe*
    * [ ] Add statistics
    * [ ] Add Markov Chains
    * [ ] Create a sampler
    * [ ] Self organizing criticality
    * [ ] The devil's staircase
    * [ ] Find a simple way of linking IP addresses to URLs for next to nothing

  *Project Workflows:*
  
    *Recovering from the TMUX/WSL/cmd.exe bug*
      * [ ] open another shell <windows>ubuntu
      * [ ] tmux ls
      * [ ] tmux kill-session <tmux session number>
      
      *To exit*
      * [ ] tmux ls
      * [ ] tmux kill-session <tmux session number>
      
  
    *Setting up a python project is needlessly complicated, but here are the steps*:
    * [ ] Update the state documentation... Simplify it!
    * [ ] Move your production files into a subdirectory, named after your project
          (miros)
    * [ ] Add a setup.py file at the same level as this directory
    * [ ] Install virtualenv
    * [ ] > virtualenv <whatever> # in this case: > virtualenv prot
    * [ ] In bash > source ./prot/Scripts/activate
    * [ ] In the named subdirectory, (miros), add a file called __init__.py, this
          turns it into a package.  Your test code will be able to import files
          into themselves like:  from miros.events import <Class>
    * [ ] Add a test directory
    * [ ] Name your tests as <whatever>_test.py
    * [ ] In the test files your imports should work
    * [ ] Install your local package > pip install --editable .
    * [ ] Write a super simple test that just fails with tries to import something
          from your package.  Test it with > pytest, confirm failure from assert
          not an import error.
    * [ ] Wrestle with it until it works.

    *Getting your examples folder to work*:
    
    * [ ] Navigate to the root directory of your project
    * [ ] > pip3 install -e . --user
  
    *Getting your autotester working:*
    
      > pip3 install pytest-watch --user
      > ptw
    
    *Automation of documentation:*
    
      > cd doc
      > python3 automake.py &

*Trace Heisenbug*
= Observe =
  *What defines Success?*
  My trace outputs would display the signal name which caused the transition as
  a string.

  *What is the problem?*
  * My trace outputs are writing numbers instead of strings.
  * If I use a print statement in the code, the bug disappears.
  * The number that it writes does not even belong to the signal that we are
    trying to track, it belongs to the last signal experienced by the system
  * self.rtc.tuples has garbage in it

  *Evidence that contradicts Assumptions:*
  * the 12 signal seen in the buggy output is the CAPACITOR_CHARGE signal
  * the output should be BATTERY_CHARGE
  * the spy output is correct
  * adding time between events and the viewing of the events had no affect on
    the bug
  
= Orient =
  *Symptoms:*
  - printing the trace will output a number instead of a signal name
  - adding a print statement within the append_fifo_to_spy method makes the bug
    go away.
  
  *Questions for Trace Heisenbug:*
    Can you simplify your test?
    Do you have enough information?
    What recently changed?
    Who else has seen a heisenbug from python print?

  *Assumptions:*
  Number 12 is the right signal number.

= Decide =
  *Idea/Hypotheses for Trace Heisenbug: >=5*
  * [ ] Add asserts, if the code asserts, bisect the problem
  * [ ] It has something to do with closures
  * [ ] It is weirder than you can imagine
  * [ ] Add a pdb break point and trouble shoot from within the code, land and
        start and see if the heisenbug happens upon a break too.
  * [ ] The code that writes the string isn't being run
  * [ ] The self.rtc.tuples looks like it is corrupted
    * [ ] The spy_on is corrupting the self.rtc
        
  *Chosen Idea/Hypothesis*
  * The spy_on is corrupting the self.rtc

  *Plan to Expand-on-Idea/Disprove-Hypothesis*
  * Confirm that tuples corrupted
  * Chase code back to source of write 
    * append_to_full_trace:
       print(sr.signal.__class__.__name__) => int somethimes
    * spy_on:
       print(sr.signal.__class__.__name__) => int somethimes

= Act =

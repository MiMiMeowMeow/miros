*Rabbit Disconnection Exception*
= Observe =
  *What defines Success?*
    A working re-write of miros-rabbitmq using the the pika async example code. 
    
  *Immediate Goal:*
    * [ ] MirosNets (change this name to something better)
      * [ ] add empty encryption/decryption
      * [ ] add empty serialization/deserialization
      * [ ] document the docstring of MirosNets
      * [ ] create an example:
        * [ ] HsmWithQueues which uses it
        * [ ] ActiveObject which uses it
        * [ ] Factory which uses it
      * [ ] change the networked_horse_archer.py to use new design
      * [ ] re-write all docs
      * [ ] create new miros-rabbitmq package

  *Immediate problem?*
    
  *Global problem?*
    My botnet was working, based on an old and unreliable way of using pika
    (from RabbitMq docs).  
    
    But this code would fail after running for > 15 minutes.  The time-to-test was
    too long to troubleshoot that approach, so I decided to re-write everything to
    work from the pika project's stable example.  Errors seen in my previous version:
    
      One two bots (WSL):
        pika.exceptions.ConnectionClosed: (-1, "ConnectionResetError(104, 'Connection reset by peer')")
      
      The other two bots:
        pika.exceptions.ChannelClosed
        
    So, there needs to be a number of resets and other complications that were
    not talked about in the RabbitMq-pika training examples. (My old code is
    broken and the testing cycle takes > 15 minutes)
    
    To avoid this problem again I will use the pika documentation's complicated
    pika-asyncronous example as a starting point, then wrap it with the
    functionality required for miros-rabbitmq

  *Evidence that informs Assumptions:*
  
  Previous issues:
  
= Orient =
  *Information about the current context*
    The pi exchange: http://192.168.1.69:15672/#/exchanges
    The WLS exchange: http://127.0.0.1:15672/#/exchanges
    
    Go on a functool vacation.  This looks really useful, you should know more
    about it.
    
    Spit balling a strategy:
      *Producer*:
      *Consumer*:
      *Scout*
      *Mesh*
      *Snoop*:
      * how do we make a fanout exchange?
  
  *Symptoms:*
  
  *Questions for Rabbit Disconnection Exception:*
    What don't I know that I need to know?
    Am I going to review this process when you have finished? Improve it?
    Can I make better decisions this time?

  *Assumptions:*

= Decide =
  *Idea/Hypotheses for Rabbit Disconnection Exception: >=5*
  
  *Chosen Idea/Hypothesis*
   
  *Plan to Expand-on-Idea/Disprove-Hypothesis*

= Act =


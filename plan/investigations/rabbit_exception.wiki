*Rabbit Disconnection Exception*
= Observe =
  *What defines Success?*
    A working re-write of miros-rabbitmq using the the pika async example code. 
    
  *Immediate Goal:*
    * [ ] look at the old mesh_network code to get the next list of specification.
    * [ ] create an intermediate class so a non-factory can use it
    * [X] MirosNets - it will need:
      * [X] the post_fifo method
      * [X] register_live_spy_callback (what class does this first occur in?  HsmWithQueues)
      * [X] register_live_trace_callback
      * [X] start_at
      * [X] live_trace attribute (to turn on the trace_snoop)
      * [X] live_spy attribute (to turn on the spy_snoop)
      * [X] mesh_encryption_key (as an argument)
      * [X] spy_snoop_encryption_key (as an argument)
      * [X] trace_snoop_encryption_key (as an argument)
    * [ ] MirosNets - will provide:
      * [ ] custom serialization to the producers on the mesh
      * [ ] custom deserialization to the consumer on the mesh
      * [ ] mesh (post_fifo)
      * [ ] spy_snoop
      * [ ] trace_snoop
      * [ ] start_at - managed by outside object

  *Immediate problem?*
    
  *Global problem?*
    My botnet was working, based on an old and unreliable way of using pika
    (from RabbitMq docs).  
    
    But this code would fail after running for > 15 minutes.  The time-to-test was
    too long to troubleshoot that approach, so I decided to re-write everything to
    work from the pika project's stable example.  Errors seen in my previous version:
    
      One two bots (WSL):
        pika.exceptions.ConnectionClosed: (-1, "ConnectionResetError(104, 'Connection reset by peer')")
      
      The other two bots:
        pika.exceptions.ChannelClosed
        
    So, there needs to be a number of resets and other complications that were
    not talked about in the RabbitMq-pika training examples. (My old code is
    broken and the testing cycle takes > 15 minutes)
    
    To avoid this problem again I will use the pika documentation's complicated
    pika-asyncronous example as a starting point, then wrap it with the
    functionality required for miros-rabbitmq

  *Evidence that informs Assumptions:*
  
  Previous issues:
  
= Orient =
  *Information about the current context*
    The pi exchange: http://192.168.1.69:15672/#/exchanges
    The WLS exchange: http://127.0.0.1:15672/#/exchanges
    
    Go on a functool vacation.  This looks really useful, you should know more
    about it.
    
    Spit balling a strategy:
      *Producer*:
      *Consumer*:
      *Scout*
      *Mesh*
      *Snoop*:
      * how do we make a fanout exchange?
  
  *Symptoms:*
  
  *Questions for Rabbit Disconnection Exception:*
    What don't I know that I need to know?
    Am I going to review this process when you have finished? Improve it?
    Can I make better decisions this time?

  *Assumptions:*

= Decide =
  *Idea/Hypotheses for Rabbit Disconnection Exception: >=5*
  
  *Chosen Idea/Hypothesis*
   
  *Plan to Expand-on-Idea/Disprove-Hypothesis*

= Act =


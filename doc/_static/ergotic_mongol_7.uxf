<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>255</x>
      <y>100</y>
      <w>695</w>
      <h>745</h>
    </coordinates>
    <panel_attributes>*Deceit_in_Detail_Tactic (marshaled)*
--
entry / 
  # Identify next marshal point
  # Load horse with arrows
  archer.arrows = HorseArcher.MAXIMUM_ARROW_CAPACITY
  archer.ticks = 0
  archer.post_fifo(Event(signal=signals.Second, times=0, period=archer.to_time(1.0), deferred=True)
second /
  archer.ticks += 1
exit / archer.cancel_event(Event(signal=signals.Seconed))
Senior_Advance_War_Cry as e\ archer.post_fifo(e)
Senior_Skirmish_War_Cry as e\ archer.post_fifo(e)
Senior_Retreat_War_Cry as e \ archer.post_fifo(e)
valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>610</x>
      <y>140</y>
      <w>320</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>*Skirmish*
--
entry /
  archer.post_fifo(
    Event(signal=signals.Officer_Lured),
    times=1,
    period=archer.to_time(
      random.randint(40, 200)),
    deferred=True
  if archer.arrow &lt; 10:
    archer.post_fifo(
      Event(
        signal=signals.Ammunition_Low))
          
Officer_Lured /
  chart.post_fifo(Retreat_War_Cry)
  
Senior_Skirmish_War_Cry / {}
Other_Skirmish_War_Cry / {}

second /
  if archer.tick % 3 == 0:
    if random.randint(1, 10) &lt;= 4:
      archer.arrow -= 1
    if archer.arrows &lt; 10:
      archer.post_fifo(
      Event(
        signal=signals.Ammunition_Low))
  archer.ticks += 1  

valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>385</x>
      <y>215</y>
      <w>200</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>*Advance*
--
entry /
  chart.post_fifo(
    Event(signal=signals.Close_Enough_for_Circle),
      times=1,
      period=archer.to_time(3.0),
      deferred=True)
      
exit/ archer.cancel_events(
  Event(signal=signals.Close_Enough_for_Circle))
  
Senior_Advance_War_Cry / {}
Other_Advance_War_Cry / {}

valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>780</x>
      <y>370</y>
      <w>130</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>*Waiting to Lure*
--
entry /
  archer.scribble('put away bow')
  archer.scribble('pull scimitar')
  archer.scribble('act scared')

exit /
  archer.scribble('stash scimitar')
  archer.scribble('pull bow')
  archer.scribble('stop acting')
  
second /
  archer.ticks += 1

  


valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>660</x>
      <y>620</y>
      <w>165</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>*Feigned Retreat*
--
entry / 
  archer.scribble('fire on Knights')
  archer.scribble('fire on footman')
  if archer.arrows == 0
    archer.post_fifo(
      Event(signal=signals.Out_Of_Arrows),
      times=1,
      period=archer.to_time(random.randint(10, 30)),
      deferred=True)

exit /
  archer.cancel_events(
    Event(signal=signals.Out_Of_Arrows))
  archer.scribble("full gallop")

second /
  if archer.tick % 3 == 0:
    if random.randint(1, 10) &lt;= 8:
    archer.arrow -= 1
    if archer.arrows == 0:
      archer.post_fifo(
      Event(
        signal=signals.Out_Of_Arrows))
  archer.ticks += 1          

Retreat_War_Cry / {}
Other_Retreat_War_Cry / {}

valign=top
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>295</y>
      <w>145</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


bg=blue
fg=black</panel_attributes>
    <additional_attributes>10.0;20.0;270.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>605</x>
      <y>420</y>
      <w>185</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

fg=black</panel_attributes>
    <additional_attributes>10.0;20.0;350.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>340</x>
      <y>425</y>
      <w>10</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>type=initial
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>340</x>
      <y>425</y>
      <w>55</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=-&gt;
fg=black</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>610</x>
      <y>400</y>
      <w>160</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Ammunition_Low / 
chart.post_fifo(
  Event(signal=signals.Retreat_Ready_War_Cry))
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>820</x>
      <y>665</y>
      <w>140</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

bg=black
fg=black</panel_attributes>
    <additional_attributes>260.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>270</x>
      <y>500</y>
      <w>330</w>
      <h>295</h>
    </coordinates>
    <panel_attributes>*Marshal*
--
entry / 
  archer.scribble("halt horse")
  archer.scribble("identify next marshal point")
  archer.scribble("field wrap wounds on self and horse")
  archer.scribble("drink water")
  chart.post_fifo(
    Event(signal=signals.READY),
      times=1,
      period=archer.to_time(3),
      deferred=True)


valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>595</x>
      <y>675</y>
      <w>75</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-&gt;
Out_Of_Arrows
fg=black</panel_attributes>
    <additional_attributes>130.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>415</x>
      <y>330</y>
      <w>160</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>*Circle and Fire*
--
   
second /
  if archer.ticks % 6 == 0:
    archer.arrow -= random.randint(1,3)
    if archer.arrows &lt; 20:
      archer.post_fifo(
      Event(signal=signals.Skirmish_War_Cry))
  archer.ticks += 1  
valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>420</x>
      <y>415</y>
      <w>140</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=-&gt;
Close_Enough_For_Circle
fg=black</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;40.0;260.0;40.0;260.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>605</x>
      <y>480</y>
      <w>185</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


fg=black</panel_attributes>
    <additional_attributes>10.0;130.0;320.0;130.0;320.0;10.0;350.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>430</x>
      <y>555</y>
      <w>160</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>*Waiting to Advance*
--
entry /
  archer.arrows = \
    HorseArcher.MAXIMUM_ARROW_CAPACITY
    
  archer.post_fifo(
    Event(
      signal=signals.Advance_War_Cry),
    times=1,
    period=random.randint(30,120),
    deferred=True)
  
exit /
  archer.cancel_events(
    Event(signal=signals.Advance_War_Cry))
  

valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>265</x>
      <y>610</y>
      <w>175</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


bg=blue
fg=black</panel_attributes>
    <additional_attributes>10.0;120.0;300.0;120.0;300.0;10.0;330.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>790</x>
      <y>555</y>
      <w>170</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


fg=black</panel_attributes>
    <additional_attributes>320.0;90.0;10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>255</x>
      <y>270</y>
      <w>125</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Advance_War_Cry as e /
  archer.yell(e)
  for ip, other in archer.others.items():
    other.dispatch(e)

style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>795</x>
      <y>580</y>
      <w>110</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Skirmish_War_Cry /
  archer.yell(Skirmish_War_Cry)
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>825</x>
      <y>640</y>
      <w>125</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Retreat_War_Cry as e /
  archer.yell(e)
  for ip, other in mongol.others.items()
    other.dispatch(e)

style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>360</y>
      <w>145</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

  

bg=blue
fg=black</panel_attributes>
    <additional_attributes>10.0;20.0;270.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>660</x>
      <y>555</y>
      <w>300</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


fg=black</panel_attributes>
    <additional_attributes>580.0;120.0;10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>670</x>
      <y>560</y>
      <w>125</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>Other_Skirmish_War_Cry as e, ip \
  archer.post_fifo(
    Event(
      signal=/
        signals.Skirmish_War_Cry))
  mongol.other[ip].dispatch(e)

style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>820</x>
      <y>775</y>
      <w>140</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

fg=black</panel_attributes>
    <additional_attributes>260.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>825</x>
      <y>765</y>
      <w>115</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Other_Retreat_War_Cry as e, ip:
  mongol.other[ip].dispatch(e)

style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>255</x>
      <y>315</y>
      <w>125</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Other_Advance_War_Cry as e, ip: /
  archer.post_fifo(
    Event(
      signal=/
        signals.Advance_War_Cry))
  archer.other[ip].dispatch(e)
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>610</x>
      <y>435</y>
      <w>160</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Retreat_Ready_War_Cry /
  ready = True
  for ip, other in mongol.others.items():
    if other.state_name != 'ead':
      ready &amp;= other.state_name == 'Waiting'
  if ready:
    # let's make sure Gandbold isn't a chicken
    archer.post_fifo(
      Event(signal=signals.Retreat_War_Cry),
      times=1,
      period=archer.to_time(
        random.randint(10, 30)),
      deferred=True)

style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>275</x>
      <y>610</y>
      <w>155</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>Ready (Marshal Point) /
  ready = True
  for ip, other in archer.others.items():
    if other.state_name != 'dead':
      ready &amp;= other.state_name == 'waiting'
  if ready:
    archer.post_fifo(Advance_War_Cry)
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>755</x>
      <y>270</y>
      <w>175</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Officer_Lured /
  archer.scribble("Knight Charging")
  archer.post_fifo(
    Event(signal=signals.Retreate_Ready_War_Cry))
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>305</y>
      <w>190</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

fg=black</panel_attributes>
    <additional_attributes>360.0;10.0;10.0;10.0;10.0;60.0;180.0;60.0;180.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>750</x>
      <y>160</y>
      <w>175</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>exit / 
  archer.cancel(Event(
    signal=signals.Ammunition_Low))
  archer.cancel(Event(
    signal=signals.Officier_Lured))
    
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
